{"version":3,"sources":["quizData.js","outcomes.js","useResult.js","components/QuizSection/index.js","components/Header/index.js","components/Modal/index.js","App.js","reportWebVitals.js","index.js"],"names":["TYPE_CONCEPT","TYPE_SKILL","LAYOUT","FRONTEND","BACKEND","AUTH","PRIVATE_ROUTES","quizData","id","text","type","points","FULL_STACK_AUTH","FULL_STACK","ADVANCED_SPA","MEDIUM_SPA","SIMPLE_SPA","MINIMAL_CLIENT","RESPONSIVE_DESIGN","MINIMAL_UI","PUBLIC_API","GAME","DATA_FETCHING","outcomes","title","desc","examples","links","remarks","initialOutcome","initialScore","useResult","useState","checked","setChecked","outcome","setOutcome","question","cat","newChecked","find","item","filter","score","reduce","acc","prop","doTheyKnowAuth","scoreBackend","scoreFrontend","chooseOutcome","QuizSection","onChange","className","map","toLowerCase","name","htmlFor","Header","Modal","toggle","content","onClick","quizSections","App","openModal","setOpenModal","toggleModal","onKeyPress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.debc9497.chunk.js","sourcesContent":["// type of question\nconst TYPE_CONCEPT = 'CONCEPT';\nconst TYPE_SKILL = 'SKILL';\n\n// main areas\nconst LAYOUT = 'Layout and Design';\nconst FRONTEND = 'Frontend';\nconst BACKEND = 'Backend';\n\n// question ids\nconst REP_LAYOUT = 'REP_LAYOUT_SKILL';\nconst BUILD_LAYOUT = 'BUILD_LAYOUT';\nconst RES_DESIGN = 'RES_DESIGN';\nconst FLEXBOX = 'FLEXBOX';\nconst GRIDS = 'GRIDS';\nconst UI_DESIGN = 'UI_DESIGN';\nconst REACT_LAYOUT = 'REACT_LAYOUT';\nconst BRANDING = 'BRANDING';\nconst SPA = 'SPA';\nconst SPA_ROUTES = 'SPA_ROUTES';\nconst APP_STATE = 'APP_STATE';\nconst REACT_PROPS = 'REACT_PROPS';\nconst GLOBAL_STATE = 'GLOBAL_STATE';\nconst REACT_GLOBAL_STATE = 'REACT_GLOBAL_STATE';\nconst GAME_LOGIC = 'GAME_LOGIC';\nconst READ_DATA = 'GET_DATA';\nconst WRITE_DATA = 'WRITE_DATA';\nconst DATA_MODEL = 'DATA_MODEL';\nconst DATA_PER = 'DATA_PER';\nconst API_ROUTES = 'API_ROUTES';\nconst GET_ROUTES = 'GET_ROUTES';\nconst POST_ROUTES = 'POST_ROUTES';\nconst SEC_API = 'SEC_API';\nconst AUTH = 'AUTH';\nconst PRIVATE_ROUTES = 'PRIVATE_ROUTES';\nconst UPLOADS = 'UPLOADS';\nconst DEPLOYMENT = 'DEPLOYMENT';\n\nconst quizData = {\n  [LAYOUT]: [\n    {\n      id: REP_LAYOUT,\n      text: 'Reproducing an existing layout',\n      type: TYPE_SKILL,\n      points: 20\n    },\n    {\n      id: BUILD_LAYOUT,\n      text: 'Building a layout from scratch',\n      type: TYPE_SKILL,\n      points: 20\n    },\n    {\n      id: RES_DESIGN,\n      text: 'Responsive design',\n      type: TYPE_SKILL,\n      points: 0\n    },\n    {\n      id: FLEXBOX,\n      text: 'Flexbox',\n      type: TYPE_CONCEPT,\n      points: 10\n    },\n    {\n      id: GRIDS,\n      text: 'Grids',\n      type: TYPE_CONCEPT,\n      points: 10\n    },\n    {\n      id: UI_DESIGN,\n      text: 'Desing (you are already a designer and/or are very comfortable with design tools)',\n      type: TYPE_SKILL,\n      points: 10\n    },\n    {\n      id: REACT_LAYOUT,\n      text: 'React layouting (JSX)',\n      type: TYPE_SKILL,\n      points: 25\n    },\n    {\n      id: BRANDING,\n      text: 'Branding (exceptional use of fonts, colours etc.)',\n      type: TYPE_SKILL,\n      points: 5\n    },\n  ],\n  [FRONTEND]: [\n    {\n      id: SPA,\n      text: 'SPA concepts',\n      type: TYPE_CONCEPT,\n      points: 10\n    },\n    {\n      id: SPA_ROUTES,\n      text: 'SPA routes vs server routes',\n      type: TYPE_CONCEPT,\n      points: 10\n    },\n    {\n      id: APP_STATE,\n      text: 'Application state concepts',\n      type: TYPE_CONCEPT,\n      points: 20\n    },\n    {\n      id: REACT_PROPS,\n      text: 'React state/props',\n      type: TYPE_SKILL,\n      points: 30\n    },\n    {\n      id: GLOBAL_STATE,\n      text: 'Global application state',\n      type: TYPE_CONCEPT,\n      points: 10\n    },\n    {\n      id: REACT_GLOBAL_STATE,\n      text: 'React global state',\n      type: TYPE_SKILL,\n      points: 10\n    },\n    {\n      id: GAME_LOGIC,\n      text: 'Game logic',\n      type: TYPE_CONCEPT,\n      points: 0\n    },\n    {\n      id: READ_DATA,\n      text: 'Data fetching (read/GET)',\n      type: TYPE_SKILL,\n      points: 0\n    },\n    {\n      id: WRITE_DATA,\n      text: 'Data fetching (write/POST)',\n      type: TYPE_SKILL,\n      points: 10\n    },\n  ],\n  [BACKEND]: [\n    {\n      id: DATA_MODEL,\n      text: 'Data modelling with NoSQL',\n      type: TYPE_CONCEPT,\n      points: 10\n    },\n    {\n      id: DATA_PER,\n      text: 'Data persistence',\n      type: TYPE_CONCEPT,\n      points: 20\n    },\n    {\n      id: API_ROUTES,\n      text: 'API routes',\n      type: TYPE_CONCEPT,\n      points: 15\n    },\n    {\n      id: GET_ROUTES,\n      text: 'Routes for reading (read/GET)',\n      type: TYPE_SKILL,\n      points: 20\n    },\n    {\n      id: POST_ROUTES,\n      text: 'Routes for writing (write/POST)',\n      type: TYPE_SKILL,\n      points: 15\n    },\n    {\n      id: SEC_API,\n      text: 'Secondary API functionality (search, nested routes etc.)',\n      type: TYPE_SKILL,\n      points: 10\n    },\n    {\n      id: DEPLOYMENT,\n      text: 'Deployment of server on Heroku',\n      type: TYPE_SKILL,\n      points: 5\n    },\n    {\n      id: AUTH,\n      text: 'Authentication flow',\n      type: TYPE_CONCEPT,\n      points: 0\n    },\n    {\n      id: PRIVATE_ROUTES,\n      text: 'Authentication flow and private routes',\n      type: TYPE_SKILL,\n      points: 0\n    },\n    {\n      id: UPLOADS,\n      text: 'Static files upload',\n      type: TYPE_SKILL,\n      points: 5\n    },\n  ]\n}\n\nexport {\n  quizData, \n  TYPE_SKILL, \n  TYPE_CONCEPT,\n  FRONTEND,\n  LAYOUT,\n  BACKEND,\n  AUTH,\n  PRIVATE_ROUTES\n};","const FULL_STACK_AUTH = 'FULL_STACK_AUTH';\nconst FULL_STACK = 'FULL_STACK';\nconst ADVANCED_SPA = 'ADVANCED_SPA';\nconst MEDIUM_SPA = 'MEDIUM_SPA';\nconst SIMPLE_SPA = 'SIMPLE_SPA';\nconst MINIMAL_CLIENT = 'MINIMAL_CLIENT';\nconst RESPONSIVE_DESIGN = 'RESPONSIVE_DESIGN';\nconst MINIMAL_UI = 'MINIMAL_UI';\nconst PUBLIC_API = 'PUBLIC_API';\nconst GAME = 'GAME';\nconst DATA_FETCHING = 'DATA_FETCHING';\n\n\nconst outcomes = {\n  [FULL_STACK_AUTH]: {\n    title: 'Full Stack Web App with Authorisation',\n    desc: [\n      'This type of application consists of three main parts: a backend with data persistence, a client that communicates with it through an API and an authorisation flow',\n      'It is the most advanced type of application, but you may be able to tackle it!'\n    ],\n    examples: ['Job searching platform', 'E-commerce app'],\n    links: [],\n    remarks: [\n      MINIMAL_CLIENT,\n      MINIMAL_UI,\n      RESPONSIVE_DESIGN,\n      DATA_FETCHING\n    ]\n  },\n  [FULL_STACK]: {\n    title: 'Full Stack Web App (No authorisation flow)',\n    desc: [\n      'This type of application consists of two main parts: a backend with data persistence and client that communicates with it through an API',\n      'It is an advanced type of application, but you may be able to tackle it'\n    ],\n    examples: ['Meme generator with storage for images'],\n    links: [],\n    remarks: [\n      MINIMAL_CLIENT,\n      MINIMAL_UI,\n      RESPONSIVE_DESIGN,\n      DATA_FETCHING\n    ]\n  },\n  [ADVANCED_SPA]: {\n    title: 'Advanced SPA',\n    desc: [\n      'This type of application is only client-side.',\n      'However, you can stretch its limits: think about complex logic and state management, exploring the HTML media API, data visualisation...',\n      'You can get creative with frontend functionalities since you seem to be up to the challenge!'\n    ],\n    examples: ['Pokemon battle app', 'Language learning app', 'Maps-heavy app'],\n    links: [],\n    remarks: [\n      MINIMAL_UI,\n      PUBLIC_API,\n      GAME,\n      RESPONSIVE_DESIGN\n    ]\n  },\n  [MEDIUM_SPA]: {\n    title: 'SPA',\n    desc: [\n      'This type of application is only client-side.',\n      'The advice is to keep it relatively simple: moderate level of component nesting, no global state etc.'\n    ],\n    examples: ['Pokedex', 'ToDo list', 'this app'],\n    links: [],\n    remarks: [\n      MINIMAL_UI,\n      PUBLIC_API,\n      GAME,\n      RESPONSIVE_DESIGN\n    ]\n  },\n  [SIMPLE_SPA]: {\n    title: 'Simple SPA',\n    desc: [\n      'This type of application is only client-side.',\n      'The advice is to keep it very simple, with minimal or no state at all.',\n      'Leverage the design and/or the content over the functionality!'\n    ],\n    examples: ['Portfolio', 'Photography website', 'Text-based adventure'],\n    links: [],\n    remarks: [RESPONSIVE_DESIGN]\n  }\n}\n\nexport {\n  outcomes,\n  FULL_STACK_AUTH,\n  FULL_STACK,\n  ADVANCED_SPA,\n  MEDIUM_SPA,\n  SIMPLE_SPA\n}","import { useState } from \"react\";\nimport {\n  FRONTEND,\n  LAYOUT,\n  BACKEND,\n  AUTH,\n  PRIVATE_ROUTES\n} from './quizData';\nimport {\n  outcomes,\n  FULL_STACK_AUTH,\n  FULL_STACK,\n  ADVANCED_SPA,\n  MEDIUM_SPA,\n  SIMPLE_SPA\n} from './outcomes';\n\nconst initialOutcome = outcomes[SIMPLE_SPA]\nconst initialScore = {[LAYOUT]: 0, [FRONTEND]: 0, [BACKEND]: 0};\n\nconst chooseOutcome = (score, doTheyKnowAuth) => {\n  const scoreBackend = score[BACKEND];\n  const scoreFrontend = score[FRONTEND];\n\n  if (scoreBackend > 60 && doTheyKnowAuth) {\n    return outcomes[FULL_STACK_AUTH]\n  }\n\n  if (scoreBackend > 60) {\n    return outcomes[FULL_STACK]\n  }\n\n  if (scoreFrontend > 70) {\n    return outcomes[ADVANCED_SPA]\n  }\n\n  if (scoreFrontend <= 70 && score[FRONTEND] > 40) {\n    return outcomes[MEDIUM_SPA]\n  }\n\n  return outcomes[SIMPLE_SPA]\n}\n\nfunction useResult() {\n  const [checked, setChecked] = useState([])\n  const [outcome, setOutcome] = useState(initialOutcome);\n\n  const onChangeChecked = (question, cat) => {\n    const newChecked = checked.find(item => item.id === question.id) ?\n      checked.filter(item => item.id !== question.id) :\n      [...checked, {...question, cat}]\n\n    setChecked(newChecked)\n  }\n\n  const doTheyKnowAuth = () => {\n    return (\n      checked.find(item => item.id === AUTH) &&\n      checked.find(item => item.id === PRIVATE_ROUTES)\n    )\n  }\n\n  const getResult = () => {\n    const score = checked.reduce((acc, question) => {\n      const prop = question.cat;\n\n      return {\n        ...acc,\n        [prop]: acc[prop] + question.points\n      }\n\n\n    }, initialScore);\n\n    setOutcome(chooseOutcome(score, doTheyKnowAuth()))\n  }\n\n  return [ onChangeChecked, outcome, getResult ];\n}\n\nexport default useResult;\n","import React from 'react';\n\nimport { quizData } from '../../quizData';\n\nimport './styles.css';\n\nfunction QuizSection({ type, onChange }) {\n\n  return (\n    <section className=\"QuizSection\">\n      <div className=\"title\">{type}</div>\n      {quizData[type].map(question => (\n        <div className={`${question.type.toLowerCase()} entry`}>\n          <input\n            id={question.id}\n            name=\"client-side-question\"\n            type=\"checkbox\"\n            onChange={() => onChange(question, type)}\n          />\n          <label htmlFor={question.id}>\n            {question.text}\n          </label>\n        </div>\n      ))}\n    </section>\n  )\n}\n\nexport default QuizSection;\n","import React from 'react';\n\nimport './styles.css';\n\nfunction Header() {\n\n  return (\n    <header>\n      <h1>Final Project Assessment Form</h1>\n      <p>\n        This quiz will help you assess your skill level \n        and decide on the complexity of your graduation project.\n      </p>\n      <p>\n        The color of the entries matters: <span className=\"concept color\">green</span> entries are about notions and concepts.\n        <span className=\"skill color\"> pink</span> entries are about practical skills and implementation.\n      </p>\n      <p>\n        Only tick the <span className=\"concept color\">green</span> entries off when you think you understand something conceptually.\n        That is to say, you can describe what this technology's potential is, which problems it addresses etc. \n        The best way is to try to explain them out loud to your rubberducky, \n        your clone or what not, and make sure you're making sense and not stumbling too much. Another way is to see if you can create\n        a conceptual map or a diagram about the topic in the entry.        \n      </p>\n      <p>\n        Only tick the <span className=\"skill color\">pink</span> entries off when you feel confident you can use those technologies and/or \n        implement those features.\n        If you have already implemented successfully on your own on some project or\n        you can visualise a way to implement them by thinking about all the steps it would take to,\n        you are probably good to go.\n        However, if realise there are too many gaps in your thought process, then it's better not to tick them off.\n      </p>\n\n    </header>\n  )\n}\n\nexport default Header;\n","import React from 'react';\n\n\nimport './styles.css';\n\nfunction Modal({ toggle, content }) {\n\n  return (\n    <div className=\"Modal\">\n      <div className=\"title\">{content.title}</div>\n      <div className=\"content\">\n        {content.desc.map(text => <p>{text}</p>)}\n      </div>\n      <button onClick={toggle}>Close</button>\n    </div>\n  )\n}\n\nexport default Modal;\n","import { useState } from 'react';\n\nimport {\n  FRONTEND,\n  LAYOUT,\n  BACKEND\n} from './quizData';\n\nimport useResult from './useResult';\nimport QuizSection from './components/QuizSection';\nimport Header from './components/Header';\nimport Modal from './components/Modal';\n\nimport './App.css';\n\nconst quizSections = [ LAYOUT, FRONTEND, BACKEND ];\n\nfunction App() {\n  const [openModal, setOpenModal] = useState(false);\n  const [ setChecked, outcome, setOutcome ] = useResult();\n\n  const toggleModal = () => {\n    setOpenModal(!openModal)\n  }\n\n  const getResult = () => {\n    setOutcome();\n    toggleModal();\n  }\n\n  return (\n    <div className=\"App\">\n      <div className={`Backdrop ${openModal && 'openModal'}`}>\n        <Header />\n        {quizSections.map(type => <QuizSection type={type} onChange={setChecked} />)}\n        <button onClick={getResult} onKeyPress={toggleModal}>My result</button>\n      </div>\n      {openModal && <Modal toggle={toggleModal} content={outcome} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}